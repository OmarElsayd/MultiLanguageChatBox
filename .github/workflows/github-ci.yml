name: RTVT CI/CD

on: [push]

env:
  IMAGE_TAG: $(date +%Y%m%d%H%M%S)
  PROJECT_ID: ${{ secrets.PROJECT_ID }}
  GOOGLE_APPLICATION_CREDENTIALS: ${{ secrets.GOOGLE_APPLICATION_CREDENTIALS }}

jobs:
  code-linting:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [ "3.11" ]
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v3
        with:
          python-version: ${{ matrix.python-version }}

      - name: Analysing the code with pylint
        run: |
          python -m pip install --upgrade pip
          pip install --no-cache-dir -e 'backend/src'
          pip install pylint
          pylint $(git ls-files '*.py')


  docker-build:
    runs-on: ubuntu-latest
    needs: code-linting
    strategy:
      matrix:
        python-version: ["3.11"]

    env:
      DB_HOST: ${{ secrets.DB_HOST }}
      DB_PASS: ${{ secrets.DB_PASS }}
      DB_PORT: ${{ secrets.DB_PORT }}
      DB_USER: ${{ secrets.DB_USER }}
      DB_NAME: ${{ secrets.DB_NAME }}
      ssh_username: ${{ secrets.ssh_username }}
      ssh_password: ${{ secrets.ssh_password }}
      ssh_hostname: ${{ secrets.ssh_hostname }}
      ssh_port: ${{ secrets.ssh_port }}
      JWT_SECRET_KEY: ${{ secrets.JWT_SECRET_KEY }}
      JWT_REFRESH_SECRET_KEY: ${{ secrets.JWT_REFRESH_SECRET_KEY }}
      SSH: ${{ secrets.SSH }}
      GOOGLE_CLOUD_PROJECT: ${{ secrets.GOOGLE_CLOUD_PROJECT }}
      GOOGLE_ACCOUNT: ${{ secrets.GOOGLE_ACCOUNT }}
      SCHEMA: ${{ secrets.SCHEMA }}
      SECRET_SALT: ${{ secrets.cc19777d84f59635 }}
      SSL_CERTIFICATE: ${{ secrets.SSL_CERTIFICATE }}
      SSL_KEY: ${{ secrets.SSL_KEY }}
      DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
      DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}

    steps:
    - uses: actions/checkout@v3
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v3
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip

    - name: Build Docker Images with Docker Compose
      run: | 
        docker-compose -f docker-compose.yaml build

    - name: Login to Docker Hub
      if: github.event_name == 'push'
      run: |
        echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u ${{ secrets.DOCKER_USERNAME }} --password-stdin

    - name: Push Docker Images
      if: github.event_name == 'push' && (github.ref == 'refs/heads/master' || github.ref == 'refs/heads/develop')
      run: |
        docker-compose -f docker-compose.yaml push




  unit-testing:
    runs-on: ubuntu-latest
    needs: docker-build
    services:
      postgres:
        image: postgres:latest
        env:
          POSTGRES_DB: test_db
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
          POSTGRES_HOST: localhost
          POSTGRES_PORT: 5432
        ports:
          - 5432:5432
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5
    strategy:
      matrix:
        python-version: [ "3.11" ]

    steps:
      - uses: actions/checkout@v3
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v3
        with:
          python-version: ${{ matrix.python-version }}

      - name: installing dependencies
        run: |
          python -m pip install --upgrade pip
          pip install --no-cache-dir -e 'backend/src'

      - name: Unit testing
        run: pytest

#      - name: Tear down Docker Compose
#        run: docker-compose -f docker-compose.yaml down

  deployment:
    needs: docker-build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/master'
    steps:
      - name: Deploy
        run: |
          echo ${{ secrets.GOOGLE_APPLICATION_CREDENTIALS }} | gcloud auth activate-service-account ${{ secrets.GOOGLE_ACCOUNT }}@${{ secrets.PROJECT_ID }}.iam.gserviceaccount.com --key-file=-
          gcloud auth configure-docker
          docker pull ${{ secrets.DOCKER_USERNAME }}/mlcb:latest
          docker tag ${{ secrets.DOCKER_USERNAME }}/mlcb:${{ env.IMAGE_TAG }} gcr.io/${{ secrets.PROJECT_ID }}/${{ secrets.DOCKER_USERNAME }}/mlcb:latest
          docker push gcr.io/${{ secrets.PROJECT_ID }}/${{ secrets.DOCKER_USERNAME }}/mlcb:$latest
          gcloud run deploy --image=gcr.io/${{ secrets.PROJECT_ID }}/${{ secrets.DOCKER_USERNAME }}/mlcb:latest\
            --port=3000 --region=us-central1 --allow-unauthenticated --platform=managed \
            --command=gotenberg gotenberg
